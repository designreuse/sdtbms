package com.bus.services;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

import com.bus.dto.Account;
import com.bus.dto.Department;
import com.bus.dto.Position;
import com.bus.dto.application.DrivingExam;
import com.bus.dto.application.EmployeeRequest;
import com.bus.dto.application.HRApplication;
import com.bus.dto.score.Scoretype;

public class EmpApplicationBean {

	@PersistenceContext
	protected EntityManager em;
	
	public EntityManager getEntityManager() {
		return this.em;
	}

	public void setEntityManager(EntityManager entityManager) {
		this.em = entityManager;
	}

	/**
	 * Get employment request form by default 
	 * @param pagenum
	 * @param lotsize
	 * @return
	 */
	public Map<String, Object> getRequests(int pagenum, int lotsize) throws Exception{
		List<EmployeeRequest> list=null;
		if(pagenum == -1 || lotsize == -1)
			list = em.createQuery("SELECT q FROM EmployeeRequest q ORDER BY receiveFormDate DESC").getResultList();
		else
			list = em.createQuery("SELECT q FROM EmployeeRequest q ORDER BY receiveFormDate DESC")
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		Long count = (Long) em.createQuery("SELECT count(q) FROM EmployeeRequest q").getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}

	/**
	 * Get employment request form by statement
	 * @param pagenum
	 * @param lotsize
	 * @param statement
	 * @return
	 */
	public Map<String, Object> getRequests(int pagenum, int lotsize, String statement) throws Exception {
		List<EmployeeRequest> list=null;
		list = em.createQuery(statement)
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		String sub_statement = statement.substring(statement.indexOf("FROM"));
		Long count = (Long) em.createQuery("SELECT count(q) "+sub_statement).getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}

	/**
	 * Create employment request form
	 * @param empRequest
	 * @throws Exception
	 */
	@Transactional
	public void createEmpRequest(EmployeeRequest empRequest) throws Exception{
		//Check department and positions
		Department d = em.find(Department.class, empRequest.getDepartment().getId());
		Position p = em.find(Position.class, empRequest.getPosition().getId());
		empRequest.setDepartment(d);
		empRequest.setPosition(p);
		em.persist(empRequest);
	}

	/**
	 * Get applications by default setting
	 * @param pagenum
	 * @param lotsize
	 * @return
	 */
	public Map<String, Object> getApplications(int pagenum, int lotsize) throws Exception{
		List<HRApplication> list=null;
		if(pagenum == -1 || lotsize == -1)
			list = em.createQuery("SELECT q FROM HRApplication q ORDER BY applyDate DESC").getResultList();
		else
			list = em.createQuery("SELECT q FROM HRApplication q ORDER BY applyDate DESC")
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		Long count = (Long) em.createQuery("SELECT count(q) FROM HRApplication q").getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}

	/**
	 * Get applications by statement
	 * @param pagenum
	 * @param lotsize
	 * @param statement
	 * @return
	 */
	public Map<String, Object> getApplications(int pagenum, int lotsize,
			String statement) throws Exception{
		List<HRApplication> list=null;
		list = em.createQuery(statement)
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		String sub_statement = statement.substring(statement.indexOf("FROM"));
		Long count = (Long) em.createQuery("SELECT count(q) "+sub_statement).getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}

	/**
	 * Create new application for applicant
	 * @param applicant
	 */
	@Transactional
	public void createApplicant(HRApplication applicant) throws Exception{
		if(applicant.getDepartment() != null){
			Department d = em.find(Department.class, applicant.getDepartment().getId());
			applicant.setDepartment(d);
		}
		if(applicant.getPosition() != null){
			Position p = em.find(Position.class, applicant.getPosition().getId());
		applicant.setPosition(p);
		}
		Account a = em.find(Account.class, applicant.getCreator().getId());
		applicant.setCreator(a);
		em.persist(applicant);
	}

	/**
	 * Get default driver exam list
	 * @param pagenum
	 * @param lotsize
	 * @return
	 */
	public Map<String, Object> getDriverExams(int pagenum, int lotsize) {
		List<DrivingExam> list=null;
		if(pagenum == -1 || lotsize == -1)
			list = em.createQuery("SELECT q FROM DrivingExam q ORDER BY examdate DESC").getResultList();
		else
			list = em.createQuery("SELECT q FROM DrivingExam q ORDER BY examdate DESC")
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		Long count = (Long) em.createQuery("SELECT count(q) FROM DrivingExam q").getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}

	/**
	 * Get driver exam list by statement
	 * @param pagenum
	 * @param lotsize
	 * @param statement
	 * @return
	 */
	public Map<String, Object> getDriverExams(int pagenum, int lotsize,
			String statement) {
		List<DrivingExam> list=null;
		list = em.createQuery(statement)
				.setFirstResult(pagenum * lotsize - lotsize).setMaxResults(lotsize).getResultList();
		String sub_statement = statement.substring(statement.indexOf("FROM"));
		Long count = (Long) em.createQuery("SELECT count(q) "+sub_statement).getSingleResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("list", list);
		map.put("count", count);
		return map;
	}
}
