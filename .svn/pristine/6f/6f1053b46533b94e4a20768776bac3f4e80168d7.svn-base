package com.bus.stripes.actionbean.score;

import java.util.ArrayList;
import java.util.List;

import net.sourceforge.stripes.action.DefaultHandler;
import net.sourceforge.stripes.action.ForwardResolution;
import net.sourceforge.stripes.action.HandlesEvent;
import net.sourceforge.stripes.action.Resolution;
import net.sourceforge.stripes.action.StreamingResolution;
import net.sourceforge.stripes.action.UrlBinding;
import net.sourceforge.stripes.integration.spring.SpringBean;

import com.bus.dto.score.ScoreDivGroup;
import com.bus.services.CustomActionBean;
import com.bus.services.ScoreBean;
import com.bus.util.EmpDepartments;
import com.google.gson.JsonObject;

@UrlBinding(value="/actionbean/ScoreGroup.action")
public class ScoreGroupActionBean extends CustomActionBean{

	private ScoreBean scoreBean;
	public ScoreBean getScoreBean(){return this.scoreBean;}
	@SpringBean
	public void setScoreBean(ScoreBean bean){this.scoreBean = bean;}
	
	private EmpDepartments empList;
	private ScoreDivGroup scoreNewGroup;
	
	@DefaultHandler
	public Resolution defaultAction(){
		try{
			List<ScoreDivGroup> parents = scoreBean.getParentScoreGroup();
			empList = new EmpDepartments();
			empList.setDeptId("0");
			empList.setDept("根目录");
			List<EmpDepartments> edlist = new ArrayList<EmpDepartments>();
			for(ScoreDivGroup sdg: parents){
				EmpDepartments e = new EmpDepartments();
				e.setDept(sdg.getName());
				e.setDeptId(sdg.getId()+"");
				e = getChildrens(e);
				edlist.add(e);
			}
			empList.setExtras(edlist);
		}catch(Exception e){
			e.printStackTrace();
		}
		return new ForwardResolution("/score/scoregroup.jsp");
	}
	
	//获取积分组的所有子组合员工
	private EmpDepartments getChildrens(EmpDepartments e) throws Exception{
		//获取当前父组的子组以及员工，赋值回父组
		EmpDepartments child = scoreBean.getAllChildrenAndEmployeeForScoreGroup(e);
		//如果子组不为null，则每个子组继续循环直到没有子组为止
		if(child.getExtras() != null && child.getExtras().size() > 0){
			List<EmpDepartments> newChildren = new ArrayList<EmpDepartments>();
			for(EmpDepartments ed: child.getExtras()){
				newChildren.add(getChildrens(ed));
			}
			child.setExtras(newChildren);
		}
		return child;
	}
	@HandlesEvent(value="addGroup")
	public Resolution addGroup(){
		JsonObject json = new JsonObject();
		try{
			String pid = context.getRequest().getParameter("gid");
			if(pid != null && !pid.equals("0")){
				ScoreDivGroup sdg = new ScoreDivGroup();
				sdg.setId(Integer.parseInt(pid));
				scoreNewGroup.setParent(sdg);
			}
			scoreBean.addScoreDivGroup(scoreNewGroup,context.getUser());
			json.addProperty("result", "1");
			json.addProperty("msg", "添加成功");
		}catch(Exception e){
			e.printStackTrace();
			json.addProperty("result", "0");
			json.addProperty("msg", "添加失败."+e.getMessage());
		}
		return new StreamingResolution("text/charset=utf-8;",json.toString());
	}

	@HandlesEvent(value="delGroup")
	public Resolution delGroup(){
		JsonObject json = new JsonObject();
		try{
			String gid = context.getRequest().getParameter("gid");
			if(gid == null){
				json.addProperty("result", "0");
				json.addProperty("msg", "删除失败.没有提供组Id");
			}else{
				scoreBean.delScoreDivGroup(gid,context.getUser());
				json.addProperty("result", "1");
				json.addProperty("msg", "删除成功");
			}
		}catch(Exception e){
			e.printStackTrace();
			json.addProperty("result", "0");
			json.addProperty("msg", "删除成功."+e.getMessage());
		}
		return new StreamingResolution("text/charset=utf-8;",json.toString());
	}
	
	public EmpDepartments getEmpList() {
		return empList;
	}

	public void setEmpList(EmpDepartments empList) {
		this.empList = empList;
	}
	public ScoreDivGroup getScoreNewGroup() {
		return scoreNewGroup;
	}
	public void setScoreNewGroup(ScoreDivGroup scoreNewGroup) {
		this.scoreNewGroup = scoreNewGroup;
	}
}
