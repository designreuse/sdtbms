package com.bus.stripes.actionbean;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.bus.dto.Department;
import com.bus.dto.Employee;
import com.bus.services.HRBean;
import com.bus.test.data.TestData;
import com.bus.util.SelectBoxOption;
import com.bus.util.SelectBoxOptions;

import net.sourceforge.stripes.action.ActionBean;
import net.sourceforge.stripes.action.ActionBeanContext;
import net.sourceforge.stripes.action.DefaultHandler;
import net.sourceforge.stripes.action.ForwardResolution;
import net.sourceforge.stripes.action.HandlesEvent;
import net.sourceforge.stripes.action.Resolution;
import net.sourceforge.stripes.action.StreamingResolution;
import net.sourceforge.stripes.action.UrlBinding;
import net.sourceforge.stripes.integration.spring.SpringBean;
import net.sourceforge.stripes.validation.SimpleError;
import net.sourceforge.stripes.validation.Validate;
import net.sourceforge.stripes.validation.ValidationError;
import net.sourceforge.stripes.validation.ValidationErrorHandler;
import net.sourceforge.stripes.validation.ValidationErrors;
import net.sourceforge.stripes.validation.ValidationMethod;

@UrlBinding("/actionbean/Employee.action")
public class EmployeeActionBean implements ActionBean, ValidationErrorHandler{
	
	
	private MyActionBeanContext context;
	public MyActionBeanContext getContext() { return context; }
	public void setContext(ActionBeanContext context) { this.context = (MyActionBeanContext)context; }
	
	private Employee employee;
	private List<Employee> employeeList = new ArrayList<Employee>();
	private List<SelectBoxOption> marriage = SelectBoxOptions.getMarriage();
	private List<SelectBoxOption> ethnic = SelectBoxOptions.getEthnics();
	private List<SelectBoxOption> politicalStatus= SelectBoxOptions.getPoliticalStatus();
	private List<SelectBoxOption> qualification= SelectBoxOptions.getQualification();
	private List<SelectBoxOption> department;
	private List<SelectBoxOption> joblevel= SelectBoxOptions.getJobLevel();
	private List<SelectBoxOption> workertype= SelectBoxOptions.getWorkerType();
	private List<SelectBoxOption> position;
	
	private List<Employee> employees = new ArrayList<Employee>();
	private int pagenum;
	private int lotsize;
	private Long totalcount;
	
	private HRBean bean;
	@SpringBean
	protected void setBean(HRBean bean){
		this.bean = bean;
	}
	protected HRBean getBean(){
		return this.bean;
	}
	
	
	public List<Employee> getEmployeeList() {
		return employeeList;
	}
	public void setEmployeeList(List<Employee> employeeList) {
		this.employeeList = employeeList;
	}
	public Employee getEmployee() {
		return employee;
	}
	public void setEmployee(Employee employee) {
		this.employee = employee;
	}
	public List<SelectBoxOption> getMarriage() {
		return marriage;
	}
	public List<SelectBoxOption> getEthnic() {
		return ethnic;
	}
	public List<SelectBoxOption> getPoliticalStatus() {
		return politicalStatus;
	}
	public List<SelectBoxOption> getQualification() {
		return qualification;
	}
	public List<SelectBoxOption> getDepartment() {
		return department;
	}
	public List<SelectBoxOption> getJoblevel() {
		return joblevel;
	}
	public List<SelectBoxOption> getWorkertype() {
		return workertype;
	}
	public List<SelectBoxOption> getPosition() {
		return position;
	}
	public List<Employee> getEmployees() {
		return employees;
	}
	public void setEmployees(List<Employee> employees) {
		this.employees = employees;
	}
	public int getPagenum(){
		return pagenum;
	}
	public int getLotsize(){
		return lotsize;
	}
	public void setPagenum(int pagenum){
		this.pagenum = pagenum;
	}
	public void setLotsize(int lotsize){
		this.lotsize = lotsize;
	}
	public Long getTotalcount() {
		return totalcount;
	}
	public void setTotalcount(Long totalcount) {
		this.totalcount = totalcount;
	}
	
	public void initData(){
		this.department = SelectBoxOptions.getDepartment(bean.getAllDepartment());
		this.position= SelectBoxOptions.getPosition(bean.getAllPosition());
		if(pagenum <= 0 || lotsize <= 0){
			pagenum = 1;
			lotsize = 20;
		}
		setTotalcount(bean.countEmployees()/lotsize +1);
		if(pagenum > totalcount)
			pagenum = Integer.parseInt(totalcount.toString());
		setEmployees(bean.getEmployees(pagenum, lotsize));
	}
	@DefaultHandler
	public Resolution defaultAction(){
		initData();
		employee = TestData.getEmployeeTestData();
		return new ForwardResolution("/index.jsp").addParameter("pagenum", pagenum);
	}
	
	@HandlesEvent(value = "create")
	public Resolution create() {
		bean.saveEmployee(employee);
        return new StreamingResolution("text;charset=utf-8", new StringReader("success from bean"));
    }
	
	@HandlesEvent(value="delete")
	public Resolution delete(){
		Employee d = new Employee();
		String targetId = context.getRequest().getParameter("targetId");
		d.setId(Integer.parseInt(targetId));
		if(d.getId() == null){
			return new ForwardResolution("/actionbean/Error.action").addParameter("error", "Delete Fail").addParameter("description", "This employee may have already assigned to some user function tables or there is server error during deletion. Please contact administrator for further operation.");
		}else if(bean.deleteEmployee(d)){
			return defaultAction();
		}else{
			return new ForwardResolution("/actionbean/Error.action").addParameter("error", "Delete Fail").addParameter("description", "This employee may have already assigned to some user function tables or there is server error during deletion. Please contact administrator for further operation.");
		}
	}
	
	@HandlesEvent(value="filter")
	public Resolution filter(){
		return defaultAction();
	}
	
	@HandlesEvent(value="prevpage")
	public Resolution prevpage(){
		pagenum--;
		return defaultAction();
	}
	
	@HandlesEvent(value="nextpage")
	public Resolution nextpage(){
		pagenum++;
		return defaultAction();
	}
	
	@ValidationMethod(on="create")
	public void avoidCreateNullEmployee(ValidationErrors errors){
		if(this.employee.getIdentitycode() == null || this.employee.getIdentitycode().equals("")){
			errors.add("employee.identitycode", new SimpleError("必须输入身份证"));
		}
	}
	
	@Override
	public Resolution handleValidationErrors(ValidationErrors errors)
			throws Exception {
		StringBuilder message = new StringBuilder();

	    for (List<ValidationError> fieldErrors : errors.values()) {
	        for (ValidationError error : fieldErrors) {
	            message.append("<div class=\"error\">");
	            message.append(error.getMessage(getContext().getLocale()));
	            message.append("</div>");
	        }
	    }
	    return new StreamingResolution("text;charset=utf-8", new StringReader(message.toString()));
	}
	
}
