package com.bus.services;

import java.util.Date;
import java.util.List;

import javax.management.Query;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

import com.bus.dto.Account;
import com.bus.dto.Department;
import com.bus.dto.Employee;
import com.bus.dto.Hrimage;
import com.bus.dto.Position;
import com.bus.util.HRUtil;

public class HRBean {

	@PersistenceContext
	protected EntityManager em;

	public EntityManager getEntityManager() {
		return this.em;
	}

	public void setEntityManager(EntityManager entityManager) {
		this.em = entityManager;
	}

	public HRBean() {

	}

	public Object getObjectByClassAndId(Class cls, int id){
		Object obj = em.find(cls, id);
		return obj;
	}
	
	public Account login(Account account){
//		String pass = HRUtil.getStringMD5(account.getPassword() + accountKey);
		Account acc ;
		try{
			acc = (Account) em.createQuery("SELECT a FROM Account a WHERE username=? AND password=?").setParameter(1, account.getUsername()).setParameter(2, account.getPassword()).getSingleResult();
			if(acc == null) {
				acc = new Account();
			}
			return acc;
		}catch(Exception e){
//			e.printStackTrace();
			System.out.println("No user found");
			return new Account();
		}
	}
	
	@Transactional
	public void saveEmployee(Employee employee) {
		Department department = em.find(Department.class, employee
				.getDepartment().getId());
		Position position = em.find(Position.class, employee.getPosition()
				.getId());
		Account account = em.find(Account.class, employee.getAccount().getId());
		Hrimage image = em.find(Hrimage.class, employee.getHrimage().getId());
		employee.setAccount(account);
		employee.setPosition(position);
		employee.setDepartment(department);
		employee.setHrimage(image);
		employee.setCreatetime(new Date());
		em.persist(employee);
	}
	
	@Transactional
	public boolean deleteEmployee(Employee e){
		Employee emp = (Employee)em.find(Employee.class, e.getId());
		emp.setStatus("D");
		em.persist(emp);
		return true;
	}
	
	public List<Employee> getEmployees(int pagenum, int lotsize){
		List<Employee> list = em.createQuery("SELECT q FROM Employee q WHERE status=? ORDER BY createtime DESC").setFirstResult(pagenum*lotsize-lotsize).setParameter(1, "A").setMaxResults(lotsize).getResultList();
		return list;
	}
	
	public Long countEmployees(){
		Long count = (Long)em.createQuery("SELECT COUNT(q) FROM Employee q WHERE status=?").setParameter(1, "A").getSingleResult();
		return count;
	}
	
	@Transactional
	public void saveDepartment(Department department){
		em.persist(department);
	}
	
	@Transactional
	public boolean deleteDepartment(Department department){
		List<Employee> list = em.createQuery("SELECT d FROM Employee d WHERE departmentid=?").setParameter(1, department.getId()).setMaxResults(1).getResultList();
		if(list == null || list.size() == 0){
			Department entity = (Department)em.find(Department.class, department.getId());
			em.remove(entity);
			return true;
		}else{
			return false;
		}
	}
	public List<Department> getAllDepartment(){
		List<Department> departments = em.createQuery("SELECT d FROM Department d").getResultList();
		return departments;
	}
	
	@Transactional
	public void savePosition(Position position){
		em.persist(position);
	}
	
	@Transactional
	public boolean deletePosition(Position position){
		List<Employee> list = em.createQuery("SELECT d FROM Employee d WHERE positionid=?").setParameter(1, position.getId()).setMaxResults(1).getResultList();
		if(list == null || list.size() == 0){
			Position entity = (Position)em.find(Position.class, position.getId());
			em.remove(entity);
			return true;
		}else{
			return false;
		}
	}
	
	public List<Position> getAllPosition() {
		List<Position> positions = em.createQuery("SELECT p FROM Position p").getResultList();
		return positions;
	}
	
	
}
