package com.bus.util;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.bus.dto.Account;
import com.bus.dto.Contract;
import com.bus.dto.Department;
import com.bus.dto.Employee;
import com.bus.dto.Position;
import com.bus.services.HRBean;

public class ExcelFileSaver {
	
	private InputStream inputStream = null;
	private HSSFWorkbook wb = null;
	private HSSFSheet sheet = null;
	private Iterator rows = null;
	
	private DataInputStream datais=null;
	private BufferedReader bf=null;
	private String strLine;
	private int index = 0;
	
	public ExcelFileSaver(FileInputStream fis){
		try{
			datais = new DataInputStream(fis);
			bf = new BufferedReader(new InputStreamReader(datais));
			this.index = 0;
		}catch (Exception e){//Catch exception if any
			System.err.println("Error: " + e.getMessage());
		}
	}
	
	public boolean hasNextLine(){
		try {
			strLine = bf.readLine();
			this.index++;
			if(strLine == null && index > 10){
				datais.close();
				return false;
			}else{
				return true;
			}
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public Map<String,Object> getEmployeeObjects(){
		Map<String, Object> map = new HashMap<String,Object>();
		String[] cols = strLine.split(",");
		if(!isValidColForEmployeeSheet(cols)){
			//Ignores empty starting rows
			if(cols.length > 0){
				String str = "Column in Row " + this.index + "  starting with :"+cols[0]+ " is not a valid column";
				map.put("error", str);
				return map;
			}
		}
		try{
			Employee e = getEmployeeFromRow(cols);
			Contract c = getContactFromRow(cols);
			map.put("employee", e);
			map.put("contract", c);
			return map;
		}catch(Exception e){
			e.printStackTrace();
			String str = "Error -- Column in Row " + this.index + " starting with :"+cols[0]+ " is not a valid column";
//			System.out.println(str);
			map.put("error", str);
			return map;
		}
	}
	
	/**
	 * For resign employees
	 * @param bean
	 * @return
	 */
	public String resignedEmployees(HRBean bean, Account act){
		addList(bean);
		return "";
//		String str="";
//		while(hasNextLine()){
//			String[] cols = strLine.split(",");
//			if(!isValidColForEmployeeSheet(cols)){
//				//Ignores empty starting rows
//				if(cols.length>24){
//					boolean digit = true;
//					if(cols[2].length() < 1) digit = false;
//					for(int i=0; i<cols[2].length();i++){
//						if(!Character.isDigit(cols[2].trim().charAt(i))){
//							digit = false;
//							break;
//						}
//					}
//					if(!digit){
//						str += " Column in Row " + this.index + "  starting with :"+cols[0]+ " is not a valid column<br/>\n";
//						continue;
//					}
//				}else{
//					if(cols.length < 1)
//						str+="Column is empty at index:"+index;
//					else
//						str += " Column in Row " + this.index + "  starting with :"+cols[0]+ " is not a valid column<br/>\n";
//					continue;
//				}
//			}
//			try{
//				Employee e = getEmployeeFromRow(cols);
//				e.setAccount(act);
//				Contract c = getContactFromRow(cols);
//				if(!bean.employeeExist(e.getFullname(), e.getDocumentkey()));
//					bean.createEmployeeAndContract(e, c);
//			}catch(Exception e){
//				e.printStackTrace();
//				str += "error occur for name:" + cols[1]+"\n";
//				break;
//			}
//		}
//		return str;
	}
	
	public Employee getEmployeeFromRow(String[] cols) throws Exception{
		Employee e = new Employee();
		if(cols[0].trim().equals(""))
			e.setDocumentkey(cols[2].trim());
		else
			e.setDocumentkey(cols[0].trim());
		e.setFullname(cols[1].trim());
		e.setWorkerid(cols[2].trim());
		e.setFirstworktime(HRUtil.parseDate(cols[3], "yyyy-MM-dd"));
		e.setIdentitycode(cols[4].trim());
		e.setEthnic(cols[5].trim());
		e.setMarriage(cols[6].trim());
		e.setDob(HRUtil.parseDate(cols[7], "yyyy/MM/dd"));
		e.setSex(cols[8].trim());
		
		Department d = new Department();
		d.setName(cols[11].trim());
		e.setDepartment(d);
		
		Position p = new Position();
		p.setName(cols[12].trim());
		e.setPosition(p);
		
		e.setPlacebelong(cols[13].trim());
		e.setPob(cols[14].trim());
		e.setHomeaddress(cols[15].trim());
		e.setMobilenumber(cols[16].trim());
		e.setDomiciletype(cols[17].trim());
		e.setQualification(cols[18].trim());
		e.setPoliticalstatus(cols[21].trim());
		
		if(!cols[22].trim().equals("") && Character.isDigit(cols[22].charAt(0))){
			e.setTimeofjoinrpc(HRUtil.parseDate(cols[22], "yyyy-MM-dd"));
		}
		
		e.setWorkertype(cols[23].trim());
		if(cols[24] != null && !cols[24].trim().equals(""))
			e.setArmy("是");
		else{
			e.setArmy("否");
		}
		e.setJoblevel(cols[25].trim());
		
		return e;
	}
	
	public Contract getContactFromRow(String[] cols) throws Exception{
		Contract c = new Contract();
		if(cols[26] == null || cols[26].equals("") || cols[26].equals("#N/A")
				|| cols[27] == null || cols[27].equals("") || cols[27].equals("#N/A"))
			return c;
		c.setType("正式");
		c.setStartdate(HRUtil.parseDate(cols[26], "yyyy/MM/dd"));
		c.setEnddate(HRUtil.parseDate(cols[27], "yyyy/MM/dd"));
		c.setCreatedate(c.getStartdate());
		return c;
	}
	
	/**
	 * Only use to extract departments and positions
	 * @param bean
	 */
	public void addList(HRBean bean){
		while(hasNextLine()){
			String[] cols = strLine.split(",");
			if(cols.length < 20 || cols[0].trim().equals("") || !Character.isDigit(cols[2].charAt(0))){
				continue;
			}
			String department = cols[11];
			String position = cols[12];
			
			Department d = bean.getDepartmentByName(department);
			if(d == null){
				bean.saveDepartment(new Department(department));
				System.out.println("Department Added:"+department);
			}
			Position p = bean.getPositionByName(position);
			if(p == null){
				bean.savePosition(new Position(position));
				System.out.println("Position Added:"+position);
			}
		}
	}
	
	public String checkInsertedIds(HRBean bean){
		String non="";
		while(hasNextLine()){
			String id = strLine.trim();
			boolean exist  = bean.isEmployeeWorkerIdExist(id);
			if(!exist){
				non +=id+"\n";
			}
		}
		return non;
	}
	
	public boolean isValidColForEmployeeSheet(String[] cols){
		if(cols.length < 1){
			return false;
		}
		if(cols[0].length() < 4){
			return false;
		}
		if(cols[0].trim().equals("")){
			return false;
		}
		String str = cols[0].trim();
		for(int i=0; i<str.length();i++){
			if(!Character.isDigit(str.charAt(i)))
				return false;
		}
		return true;
	}
	
	public int getIndex(){
		return this.index;
	}
//	public ExcelFileSaver(File f){
//		try{
//			inputStream = new FileInputStream(f);
//			wb = new HSSFWorkbook(inputStream);
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
//	
//	public ExcelFileSaver(InputStream is){
//		try{
//			this.inputStream = is;
//			wb = new HSSFWorkbook(inputStream);
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
	
//	public void init(int sheetPosition){
//		sheet = wb.getSheetAt(sheetPosition);
//		rows = sheet.rowIterator();
//	}
	
//	public boolean haveNextRow(){
//		return rows.hasNext();
//	}
//	
//	public Map<String,Object> getEmployeeObjects(){
////		row = (HSSFRow) rows.next();
////		Iterator cells = row.cellIterator();
////		while(cells.hasNext()){
////			cell=(HSSFCell) cells.next();
////			
////			if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING)
////			{
////				System.out.print(cell.getStringCellValue()+" ");
////			}
////			else if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC)
////			{
////				System.out.print(cell.getNumericCellValue()+" ");
////			}
////			else
////			{
////				System.out.print(cell.getCellType()+" ");
////			}	
////		}
////		System.out.println("Done");
//		return null;
//	}
//	
//	public void setWorkSheet(int position){
//		sheet = wb.getSheetAt(position);
//		rows = sheet.rowIterator();
//	}
}
